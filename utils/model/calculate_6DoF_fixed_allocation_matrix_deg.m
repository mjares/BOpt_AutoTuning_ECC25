function Alloc_Matrix = calculate_6DoF_fixed_allocation_matrix_deg( ...
    thrusters_orientation, thrusters_position)
% ALLOC_MATRIX  Calculate the force allocation matrix (control
%               effectiveness matrix). This transformation is assumed to be
%               linear and static for a given thruster orientation-position
%               pair.
%
%   Parameters:
%   -----------
%   thrusters_orientation : (n x 3 matrix) thruster orientation using Euler
%                           angles (in [degrees]) with respect to body 
%                           frame.
%   thrusters_position : (n x 3 matrix) thruster positions in body frame 
%                        measured in [m].
%   
%   Return:
%   -------
%   Alloc_Matrix : (m x n matrix) that produces virtual control signals from
%   true control signals: i.e.: this is a linear transformation from the
%   thruster generated forces to the XYZ-Roll-Pitch-Yaw torques and forces
%   on the vehicle.

    number_of_thrusters = size(thrusters_orientation, 1); % n
    
    thrusters_ori_rad = deg2rad(thrusters_orientation); 
    
    Alloc_Matrix = zeros(6, number_of_thrusters); % m = 6 (6 DoF)  
    
    % Finding the rotation matrices (direction cosine matrix) for each 
    % thruster. Every column of "thrusters_ori_rad" represents roll, pitch,
    % and yaw respectively.
    DCM = angle2dcm(thrusters_ori_rad(:,1), thrusters_ori_rad(:,2), ...
        thrusters_ori_rad(:,3), 'XYZ'); % XYZ is the rotation order
    
    for i = 1:1:number_of_thrusters
       
        % The upper half of the allocation matrix describes the force 
        % distribution from each thruster into the body frame 
        % surge-sway-heave directions respectively.
        % We use only the first column of the DCM matrix for each propeller
        % because the thruster force is assumed to be aligned with the
        % first axis of the thruster's frame of reference. 
        % In other words, assume ft_i is the net force from propeller i, 
        % ft_i in the thruster frame would be a vector [ft_i, 0, 0]^T, 
        % therefore: DCM(:,:,i) * [ft_i, 0, 0]^T == DCM(:,1,i) * ft_i.
        Alloc_Matrix(1:3, i) = DCM(:,1,i);

        % The bottom half of the allocation matrix describes the torque
        % generated by each thruster.
        % Each torque is the cross product of the thruster position vector
        % and the thruster force vector in body frame. The allocation
        % matrix only captures the cross product of the position and the
        % direction of the thruster force in body frame.
        Alloc_Matrix(4:6, i) = cross(thrusters_position(i,:), Alloc_Matrix(1:3, i));
        
    end
    
end